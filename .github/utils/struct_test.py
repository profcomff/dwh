from .struct_create_state import create_state


def parse_args():
    """Получаем параметры командной строки.

    * `--db-dsn` – строка подключения к базе данных
    * `--save-base` – если True, то надо делать коммит новых файлов перед
      окончанием работы скрипта
    """


def test_folder_structure(_) -> bool:
    """Проверяем правильность папок в репозитории.

    Папка struct содержит скрипты для обновления базы дынных.
    Должна иметь следующую структуру:
        - Название среды:
            - STG для данных, которые получаются из источника без
              дополнительной обработки;
            - ODS для данных в процессе обработки, которые еще не могут быть
              использованы конечными пользователями, но которые могут
              понадобиться для разработки;
            - DM для таблиц, предназначенных для конечных пользователей;
            - APP для таблиц, которые нужны для работы приложений;
        - Название проекта
            - В UPPER_SNAKE_CASE;
            - Не транслит, а английский язык (проверяется ревьюером);
        - Название таблицы
            - в UPPER_SNAKE_CASE;
            - Не транслит, а английский язык (проверяется ревьюером);
        - Дата в формате YYYY-MM-DD
        - Скрипты up.sql и down.sql
            - up.sql создает таблицу или обновляет предыдущую версию;
            - down.sql удаляет таблицу или возвращает к предыдущей версии;
            - (autogenerated) base.py содержит DDL таблицы после применения
              up.sql для проверок и экстренного восстановления базы.
    """


def test_nochanges(_) -> bool:
    """Проверка, что старые скрипты не изменялись.

    Чтобы не произошло такого, что на проде таблица с одним кодом, а
    в репозитории с другим.
    """


def test_upgrade(_) -> bool:
    """Запуск скрипта увеличения версии в тестовом окружении.

    - Если таблица существует в тестовом окружении, ее надо удалить и создать
      заново из предпоследней версии `base.sql`. Если версия всего одна,
      пропустить шаг;
    - Запустить скрипт `up.sql` последней версии;
    - Выполнить `create_state` и записать в файл `base.py`.
    """


def test_downgrade(_) -> bool:
    """Запуск скрипта уменьшения версии в тестовом окружении.

    - Если таблица существует в тестовом окружении, ее надо удалить и создать
      заново из последней версии `base.sql`;
    - Запустить скрипт `down.sql` последней версии;
    - Выполнить `create_state` и сверить результат с предпоследней
      версией `base.py`.
    """


if __name__ == '__main__':
    assert test_folder_structure(...), 'Folder structure incorrect'
    assert test_nochanges(...), 'Old scripts can\'t be changed'
    assert test_upgrade(...), 'Upgrade script is incorrect'
    assert test_downgrade(...), 'Downgrade script is incorrect or wrong state'
    print('Test complete!')
